// <auto-generated />
using System;
using ItEmperor.Party.Tests;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ItEmperor.Party.Tests.Migrations
{
    [DbContext(typeof(PartyDbContext))]
    partial class PartyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ItEmperor.Party.Address.Simple.SimpleAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("SimpleAddress");
                });

            modelBuilder.Entity("ItEmperor.Party.Employment.Complex.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HourSalaryFrom")
                        .HasColumnType("int");

                    b.Property<int>("HourSalaryTo")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("ItEmperor.Party.Employment.Complex.PositionAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartData")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionAssignment");
                });

            modelBuilder.Entity("ItEmperor.Party.Employment.Simple.SimpleEmployment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("SimpleEmployment");
                });

            modelBuilder.Entity("ItEmperor.Party.Organization.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("ItEmperor.Party.Person.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ItEmperor.Party.Address.Simple.SimpleAddress", b =>
                {
                    b.HasOne("ItEmperor.Party.Person.Person", null)
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("ItEmperor.Party.Employment.Complex.Position", b =>
                {
                    b.HasOne("ItEmperor.Party.Organization.Organization", "Organization")
                        .WithMany("Positions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ItEmperor.Party.Employment.Complex.PositionAssignment", b =>
                {
                    b.HasOne("ItEmperor.Party.Person.Person", null)
                        .WithMany("PositionAssignments")
                        .HasForeignKey("PersonId");

                    b.HasOne("ItEmperor.Party.Employment.Complex.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ItEmperor.Party.Employment.Simple.SimpleEmployment", b =>
                {
                    b.HasOne("ItEmperor.Party.Organization.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItEmperor.Party.Person.Person", "Person")
                        .WithMany("Employments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ItEmperor.Party.Organization.Organization", b =>
                {
                    b.OwnsMany("ItEmperor.Party.Address.Complex.Placement", "Placements", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("EffectiveDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("EndDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("OrganizationId");

                            b1.ToTable("Placement");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");

                            b1.OwnsOne("ItEmperor.Party.Address.Complex.Site", "Site", b2 =>
                                {
                                    b2.Property<Guid>("PlacementId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("AddressText")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Purpose")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PlacementId");

                                    b2.ToTable("Placement");

                                    b2.WithOwner()
                                        .HasForeignKey("PlacementId");

                                    b2.OwnsOne("ItEmperor.Party.Address.Complex.GeographicLocation", "GeographicLocation", b3 =>
                                        {
                                            b3.Property<Guid>("SitePlacementId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<int>("Type")
                                                .HasColumnType("int");

                                            b3.HasKey("SitePlacementId");

                                            b3.ToTable("Placement");

                                            b3.WithOwner()
                                                .HasForeignKey("SitePlacementId");
                                        });

                                    b2.Navigation("GeographicLocation")
                                        .IsRequired();
                                });

                            b1.Navigation("Site")
                                .IsRequired();
                        });

                    b.Navigation("Placements");
                });

            modelBuilder.Entity("ItEmperor.Party.Organization.Organization", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("ItEmperor.Party.Person.Person", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Employments");

                    b.Navigation("PositionAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
